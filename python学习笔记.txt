python打开一个简单的http服务server
python -m SimpleHTTPServer

## 使用pyenv管理系统的python环境
brew install pyenv

##ubuntu 环境
sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \
libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
xz-utils tk-dev

git clone https://github.com/pyenv/pyenv.git ~/.pyenv
echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc
echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc
echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\n  eval "$(pyenv init -)"\nfi' >> ~/.bashrc
exec "$SHELL"

如果要搞YouCompleteMe, 安装前带这个参数
export PYTHON_CONFIGURE_OPTS="--enable-framework"

安装完后，
pyenv versions #可以看当前系统的python 版本
pyenv install -l #列出支持可安装的python版本
$ pyenv install 2.7.3   # 安装python
$ pyenv uninstall 2.7.3 # 卸载python
$ pyenv global 2.7.3  # 设置全局的 Python 版本，通过将版本号写入 ~/.pyenv/version 文件的方式。
$ pyenv local 2.7.3 # 设置 Python 本地版本，通过将版本号写入当前目录下的 .python-version 文件的方式。通过这种方式设置的 Python 版本优先级较 global 高。

python优先级
shell > local > global
pyenv 会从当前目录开始向上逐级查找 .python-version 文件，直到根目录为止。若找不到，就用 global 版本。
$ pyenv shell 2.7.3 # 设置面向 shell 的 Python 版本，通过设置当前 shell 的 PYENV_VERSION 环境变量的方式。这个版本的优先级比 local 和 global 都要高。–unset 参数可以用于取消当前 shell 设定的版本。
$ pyenv shell --unset
$ pyenv rehash  # 创建垫片路径（为所有已安装的可执行文件创建 shims，如：~/.pyenv/versions/*/bin/*，因此，每当你增删了 Python 版本或带有可执行文件的包（如 pip）以后，都应该执行一次本命令）

## pyenv-virtualenv
这东西作用有点像gemset, 可以管理不同python环境包
$ pyenv virtualenv 2.7.10 env-2.7.10 #创建虚拟环境 若不指定python 版本，会默认使用当前环境python版本。如果指定Python 版本，则一定要是已经安装过的版本，否则会出错。环境的真实目录位于 ~/.pyenv/versions 下

pyenv virtualenvs #列出当前虚拟环境
pyenv activate env-name  # 激活虚拟环境
pyenv deactivate #退出虚拟环境，回到系统环境

##这语言他妈布尔类型是首字母大写 True and False

删除
pyenv uninstall my-virtual-env
rm -rf ~/.pyenv/versions/env-name  # 或者删除其真实目录

#安装时遇到zlib openssl 之类错误，这样解决
# ~/.env-exporter
# about zlib
export CFLAGS="-I$(xcrun --show-sdk-path)/usr/include"
# about readline
export CFLAGS="-I$(brew --prefix readline)/include $CFLAGS"
export LDFLAGS="-L$(brew --prefix readline)/lib $LDFLAGS"
# about openssl
export CFLAGS="-I$(brew --prefix openssl)/include $CFLAGS"
export LDFLAGS="-L$(brew --prefix openssl)/lib $LDFLAGS"
# about SQLite (maybe not necessary)
export CFLAGS="-I$(brew --prefix sqlite)/include $CFLAGS"
export LDFLAGS="-L$(brew --prefix sqlite)/lib $LDFLAGS"

every time I want install a Python:
> source ~/.env-exporter


-------------------
pip 更新包 

删了又装
$ pip uninstall xxx
$ pip install xxx

或者加 --upgrade -U 标示
pip install Django --upgrade

加版本
pip install --upgrade somepackage django==1.2.4
-------------------

## idel里输入
dir(__builtins__) #查看内置函数列表

例如有print这个builtins, 可以用help(print)去查看他的用法

## 使用r来做字符串转义
在字符串例如"c:\now"这种里面，打印出来 \n会变成个换行符，通常我们要打 c:\\now, python里有个r转义的方法:
string = r"c:\now"

这样就可以用原始字符串了
但是要记得\反斜杠不能写在结尾, 写在结尾意思是这行没完成

这种方式写法可以用在多行字符串
""" str """

while if 的例子，输入8就ok的小游戏
print( "fuck" )

guess = input("you fucking idot ")
guess = int(guess)

while guess != 8:
    print("idiot try again!!")
    guess = input("again! ")
    guess = int(guess)
    if guess == 8:
        print("ok you freak!")

## 简单的类型转换
int('599') #字符串转整形
float('5.0') #转float
str(3.3) #转String

##获取变量的类型

a = 3.3
type(a) #float

用isinstance方法会更好
isinstance(520, int)
isinstance('hebe', str)
isinstance(3.3, float)
##简单的运算操作符
+ - * / %(求余数) ^ **(幂运算, 3**2 就是3的平方) //

支持像c一样的 += -= *=等简化运算符
python整数除法跟其他语言不一样，会精确的算出小数值

10 / 3 # 3.3333333

如果想用回其他语言的地板除法，只取整数，就用//来去除


## 逻辑操作符，python用的是 and or not, 其中not是会返回一个相反的布尔值

## 三元操作符，反正有点怪
if x < y :
  small = y
else :
  small = x

写成

small = y if x < y else x


## assert 断言
有点像其他语言测试用的断言，判断后面的表达式是否true 不是的话就抛错误

assert 3 < 4 #ok, 什么都不会发生程序继续执行
assert 3 < 4 #报错


## for循环
a = "fuck you shit"
for each in a:
  print(each)


## range, 类似ruby的...， 不包含最后一个数
for i in range(0, 9):
  print(i) #打印出0到8

## for循环里 break和continute 就和其他语言差不多，截断和调过下一个代码跳到下一个for循环

## 数组(也叫列表)
a = [1, 2, 3]
a.append(4) # => [1, 2, 3, 4]  # append加一个元素
a.extend([5, 6]) # => [1, 2, 3, 4, 5, 6]  # extend可以加多个元素，但是参数要是数组

a.insert(0, 0) # [0, 1, 2, 3, 4, 5, 6] #insert 在第0(第一个参数)位插入一个0

##数组获取值
a = [0, 1, 2]
a[0] # => 0

a[1], a[2] = a[2], a[1] #这样可以让第0和第1位互调

##数组删除
a.remove("shit") #这个是 删除"shit"这个元素, 只删除第一个，没有的话会报错
del a[3] #这个是删除数组3下标的元素, 注意这是一个语句，并不是一个数组方法

del a #如果不指定下标，可以整个数组变量都删除掉(手动节省内存)

a.pop() #返回弹出最后一个元素, 同时数组里的元素会被删掉
a.pop(2) #这样可以直接弹出某一个元素

##数组分片，相当于slice
a = [1, 2, 3]
a[0:2] # => [1, 2] 不包含下标2的元素
a[:2] # => 简写
a[1:] # => [2, 3] 直到最后
a[:] # => 返回整个拷贝数组

还可以置顶第三个数，步进
a = [1,2,3,4,5]
a[0:4:2] #=>  [1,3,5], 相当于跳两位才拿一个
a[::-1] #=> [5,4,3,2,1] 取-1 相当于反转，向后拿

#数组的运算
[123] + [456] #=>[123, 456]
[123] *3 #=>[123, 123, 123]

#in操作符去判断元素是否在列表
a = ["shit", "fuck"]
"shit" in a #=>true
"mother" not in a #=>true

#count计算某个元素出现了多少次
a = [1,2,3]
a.count(2) #=> 1

#index就是算某个元素的下标
#reverse 反转
#sort 按从小到大排序 和ruby不同这些方法都会影响原数组
a = [1,3,2]
a.sort() #=> [1,2,3]
a.sort(reverse=true) #=> [3,2,1]，reverse默认是fasle

#元祖, 比起列表就是不能排序不能修改, 可以slice可以复制
a = (1, 2, 3)
等价于
a = 1, 2, 3

为了不搞混(1) 这种是整形优先级表达式，创建单个值的元祖加个逗号来搞
a = (1, )

##跟ruby一样，字符串也可以当做数组操作

#join的用法好7奇怪
a = ["i", "love", "hebe"]
"_".join(a) #=> 他妈要这样用 i_love_hebe

#字符串格式化，不像ruby方便
ruby: "i love #{ a }" 可以直接引用a的值
python "i love {a}".format(a="shit")
不过他的格式化可以用像c的那种 %c %d %x %f这种格式化参数

#转义符, 只记特别的
\b 退格符
\a 发出系统响声
\n 换行
\t 制表符tab
\v 纵向制表符
\r 回车符
\o 八进制
\x 十六进制
\f 翻页符
\0 空字符
\\ 反斜杠

#像列表数组，字符串，元祖这些，python统称为list，序列, 有个BIF list()可以把这些东西都转成列表
a = (1, 2,3 )
list(a) #=> [1, 2, 3]

b = "fish"
list(b) #=> ["f", "i", "s", "h"]

#tuple([iterable]) 就是把其他序列转成元祖

#str() 转成字符串

#min max sorted这些就不说了,都是BIF。 reversed是返回一个迭代器，循环拿回反向排序的元素，作用不大

#enumerate(iterable) 返回一个迭代器，迭代器每个元素是一个 二元组，二元组里第一个参数是下标，第二个是指，可以做key, value的遍历的样子
str1 = "Fish"
for each in enumerate(str1):
  print(each) #=> (0, "F")  (1, "i") (2, "s") (3, "h")

#函数 方法！
def为创建函数的关键字, 后面加个 :

def main():
  print("hello world")

调用
main()

#return 后面就是函数返回值，好像不能最后一行自动return

#写函数文档，在函数第一行的string可以变成文档，可以用 方法名.__doc__ 或者 help(方法名) 打印出来
def main():
  """
    打印 hello world
  """

  print("hello world")

main.__doc__
help(main)

#指定变量名的arguments, 可以无视函数的参数排序
def a(shit, fuck):
  print(shit + fuck)

a(1, 2) #=> 3
a(fuck = 5, shit = 4) #=> 9

#形参默认值写法，跟ruby一样
def b(shit="fuck"):
  print(b)

#用*号去收集参数
def test(*params, extra="shit"):
  print("%d个参数" % len(params))
  print(extra)

test(1,2,3) #=> 3个参数， extra= "shit"
test(1,2, extra = 3) #=> 2个参数， extra=  3

#传入时用*可以结构序列
a = [1,2,3]
test(a)  #=> 1个参数， 因为相当于给了个数组变量
test(*a)  #=> 3个参数， 把数组结构成 1,2,3这样传入

# **可以解构字典
def test(**params): #这样就会组成一个{}
  print("有%d个参数" % len(params))

a = {a: 1, b: 2}
test(**a) #这样会解构成 a = 1 , b = 2 传参


#一般函数只能引用外部变量，不能修改，但是可以借用global关键字去强制修改

#闭包，就是函数内定义并返回内部函数，可以引用父函数的局部变量，跟js差不多，没什么大不了的

def a(y):
  def closure(x):
    retrun x + y
  return closure

i = a(5)(6) #=> 11

# lambda表达式
def add(a, b):
  return a + b

写成 add = lambda a, b : a + b

# 两个BIF, filter, map, 干什么用跟ruby一样，主要是参数蛋疼和其他动态语言相反，第一个参数是迭代器，第二个参数时集合, 最后返回的是个迭代器，用list去转一下才会返回一个想要的集合, 妈比
list( filter(lambda a : print(a), [1, 2, 3]) )
list( map(lambda a : a * 2, [1, 2, 3]) )

#字典 hash !
好像键值只能像json一样用字符串，不能像ruby一样用symbo, stupid

创建可以直接用大括号，或者用dict((2长度元祖), (), ())这样去创建
或者用 dict(a=1, b=2)这样创建

#fromkeys() 创建并赋值，不赋值时是None
a = {}
a.fromkeys(("a", "b", "c"), 1) #=>{a: 1, b: 1, c: 1} #懒得打一堆双引号，知道就好

#keys(), values(), items()顾名思义啦

#他妈用[]去拿不存在的key时会抛错，要用get()去拿才会不存在时返回None

#也可以用in判断键值是否在字典里

#用 {}.clear去清空字典，不要用指向新的{}这种方式

#可以用pop(key)去拿走一个键值，popitem()随意拿出一个

#update可以更新某一项 {a: 1}.update(a=3)

# Set 集合
set = { 1, 3, ,3 ,4 }
#=> {3, 1, 4}  #=> 无序唯一

list(set([1,3,3,4]) #帮数组去重，但是顺序会乱掉

# set 可以遍历，add remove in not in

# frozenset() 可以把set冻结起来不可变

######### File读取 ############
f = open("record", mode="rw")
f.read
f.read(size = -1)
f.readline
f.close

#文件系统函数们
getcwd() #拿当前目录
chdir() #换工作目录
listdir(path = '') #例如给到的目录的文件名
mkdir() #创建目录
makedirs(path)
remove(path) # delete file
rmdir(path)
removedirs()
rename(old, name)
system(shell command) #执行系统命令
os.curdir
os.pardir
os.sep
os.linesep
os.name

#os.path模块里面还有一些实用的方法
basename(path) #单独返回文件名
dirname(path) #单独返回目录名，去掉文件名
join(path, path2, path3) #会将文件组拼在一起，像ruby File.join
split(path) #分离目录层级
splitext(path) #分离文件名和扩展名
getsize(file) #返回文件大小
getatime(file) #返回文件最近访问时间
getctime(file) #返回创建时间
getmtime(file) #返回修改时间
#以下返回True或False, 主要用于判
exists(path) #目录是否存在
isabs(path) #是否绝对路径
isdir(path) #是否目录
isfile(path) #是否个文件
islink(path) #是否存在并且是个符号链接
ismount(path) #判断目录是否是个挂载点
samefile(path1, path2) #path1 path2是指向同一个文件

##！！ pickle 序列化保存python对象
import pickle
my_list = [123, 3.14, "xxxx"]
pickle_file = open("shit.txt", mode="wb")
pickle.dump(my_list, pickle_file)
pickle_file.close()

#读取
import pickle

pickle_file = open("shit.txt", mode="r")
my_list = pickle.load(pickle_file)
print(my_list)


## 异常处理 Exception

#try expect
try:
  f = open("noshit.txt")
  print(f.read())
  f.close
expect OSError: #OSError是最高级的Expection
  print("open error")

#还可以跟多个expect, as reason可以输出出错详细
try:
  sum = 1 + "1"
  f = open("noshit.txt")
  print(f.read())
  f.close()
expect OSError as reason:
  print("出错:" + str(reason))
expect TypeError as reason:
  print("类型出错:" + str(reason))

#还有一种写法, expect (OSError, TypeError)

#如果无法确定类型，就只写expect: 

# raise 就是自己扔个错误往上抛

# finally 就是其他处理异常的最终必会执行的语句

##!!! 面向对象
class Fucker:
  color = "green"
  def been_fucked(self):
    print("aaaaaaaaa")

要注意定义类里面的实例方法，要显式写参数里面的self

class BallL
  def setName(self, name):
    self.name = name

  def kick(self)
    print("kick %s" % self.name )

## 构造方法是 def __init__(self, ****):

## 私有属性双下划綫

class Person:
  def __init__(self, name):
    self.__name = name

  def fuck(self):
    print(self.__name)

其实python的是伪私有变量, 外部还可以用 _类名__变量名 这样去直接访问私有变量
p = Person(name = "shit")
p_Person__name

#继承 
class Parent:
  def hello(self):
    print("parent method")

class Child(Parent):
  pass

c = Child()
c.hello()
