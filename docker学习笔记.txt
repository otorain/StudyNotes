##安装
ubuntu里安装最新版本的方法
$ sudo apt-get install apt-transport-https
$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9
$ sudo bash -c "echo deb https://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list"
$ sudo apt-get update
$ sudo apt-get install -y lxc-docker
在安装了Docker官方软件源后，若需要更新Docker软件版本，只需要执行以下命令即可升级：
$ sudo apt-get update -y lxc-docker

现在又有了更简单的方法
sudo apt-get innstal docker.io -y

官方安装例子:
Get the latest Docker package.
$ wget -qO- https://get.docker.com/ | sh

#Note: If your company is behind a filtering proxy, you may find that the apt-key command fails for the Docker repo during installation. To work around this, add the key directly using the following:

$ wget -qO- https://get.docker.com/gpg | sudo apt-key add -


Mac安装
在Mac OS上使用Docker，同样需要Boot2Docker工具的支持。主要步骤如下：
1）下载最新官方Docker for OS X Installer。读者可以从https://docs.docker.com/installation/mac/下载。
2）双击运行安装包。这个过程将安装一个VirtualBox虚拟机、Docker本身以及Boot2Docker管理工具，如图2-4所示。
3）安装成功后，找到Boot2Docker（Mac系统的Application或“应用”文件夹中）并运行它。现在进行Boot2Docker的初始化：
$ boot2docker init
$ boot2docker start
$ $(boot2docker shellinit)
读者将看到虚拟机在命令行窗口中启动运行，并显示Docker的启动信息，则说明Docker安装成功。
当虚拟机初始化完毕后，可以使用boot2docker stop和boot2docker start来控制它。
注意：如果在命令行中看到如下提示信息：To connect the Docker client to the Docker daemon, please set: export  DOCKER_HOST=tcp://192.168.59.103:2375可以执行提示信息中的语句：
exportDOCKER_HOST=tcp://192.168.59.103：2375。此语句的作用是在系统环境变量中设置Docker的主机地址。

------------------------
更换中科大的源
https://lug.ustc.edu.cn/wiki/mirrors/help/docker
新版的 Docker 使用 /etc/docker/daemon.json（Linux） 或者 %programdata%\dockerconsole.log(onfig\daemon.json（Windows） 来配置 Daemon。

请在该配置文件中加入（没有该文件的话，请先建一个）：

{
  "registry-mirrors": ["https://docker.mirrors.ustc.edu.cn"]
}

Docker Daemon configuration file 文档： https://docs.docker.com/engine/reference/commandline/dockerd/#/daemon-configuration-file

Docker for Windows 文档: https://docs.docker.com/docker-for-windows/#/docker-daemon

)
------------------------



##三大核心概念 镜像(只读，相当于模板，限制了边界), 容器(镜像跑起来的一个实例，里面的操作就在容器里玩), 仓库（简单理解就是github一样存放镜像就好）

##拉镜像
$ sudo docker pull ubuntu
这样就会拉下ubuntu:lastest

$ sudo docker pull ubuntu: 14.04
下载指定版本的ubuntu

默认是从registry.hub.docker.com这个源下载的，也可以手动指定从哪个源下
$ sudo docker pull dl.dockerpool.com:5000/ ubuntu

下载完就可以用镜像创建一个容器了, 例如用ubuntu的/bin/bash
$ sudo docker run -t -i ubuntu /bin/bash

查看镜像信息
$ sudo docker images
可以看到诸如此类的信息,其中id标明唯一
REPOSITORY                    TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
kalilinux/kali-linux-docker   latest              e49f6054690a        9 weeks ago         420.3 MB

有时打个tag会挺方便的
$ sudo docker tag dl.dockerpool.com:5000/ubuntu:latest ubuntu:latest
就打出了一个ubuntu:latest的标签，他和源的id是一样的

docker inspect id可以产看镜像的详细信息

docker search TERM 可以搜索仓库里的镜像
例如 $ docker search mysql

删除镜像,
docker rmi [IMAGE] #iamge可以是tag或者id
有时容器在跑时删不了可以加-f参数

查看所有容器
$ docker ps -a

删除容器
docker rm 容器id


导入导出镜像
导出
$ sudo docker save -o ubuntu_14.04.tar
导入
$ sudo docker load --input ubuntu_14.04.tar
or
$ sudo docker load < ubuntu_14.04.tar


##!!!容器
容器相比起镜像，他就是一个轻量实例，有额外的可写入文件层

新建容器
$ sudo docker create -it ubuntu:lastest
$ sudo docker ps -a
create完可以用start启用他, docker run相当于先create再start

当利用docker run来创建并启动容器时，Docker在后台运行的标准操作包括：   
•检查本地是否存在指定的镜像，不存在就从公有仓库下载。
•利用镜像创建并启动一个容器。
•分配一个文件系统，并在只读的镜像层外面挂载一层可读写层。
•从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去。
•从地址池配置一个IP地址给容器。
•执行用户指定的应用程序。
•执行完毕后容器被终止。

$ sudo docker run -ti ubuntu /bin/bash #创建了一个可交互的终端
t选项就是分配一个伪终端pseudo-tty, i参数就是标准输入保持打开

让容器在Daemonized形式后台运行
$ sudo docker run -d ubuntu /bin/sh -c "loop do sth"
ce554xxxxxx #执行完后会返回一个唯一id

用logs id查看上面输出的信息
$ sudo docker logs ce5

终止容器 docker stop
例如上面的ce5容器
$ docker stop ce5

$ docker -a -q #可以列出所有stop状态的容器
$ docker start ce5 #又再打开
$ docker restart ce5 #先stop再start

进入容器
如果进入daemon状态的容器，大家都看不到他的信息，这时可以用docker attach或docker exec或nsenter等，都和linux差不多
$ docker attach id或容器names
$ docker exec -ti 容器id /bin/bash

导入导出容器
导出容器
$ docker export 容器id > xxx.tar

导出的文件可以使用docker import导入，成为镜像
$ cat xxx.tar | sudo docker import -test/ubuntu:v1.0

!!容器数据管理,主要有两种方式:
·数据卷
·数据卷容器

数据卷
数据卷是一个可供容器使用的特殊目录，它绕过文件系统，可以提供很多有用的特性：
•数据卷可以在容器之间共享和重用。
•对数据卷的修改会立马生效。
•对数据卷的更新，不会影响镜像。
•卷会一直存在，直到没有容器使用。数据卷的使用，类似于Linux下对目录或文件进行mount操作。

docker run时，使用-v标记可以创建一个数据卷，多个v可以创建多个
使用training/webapp镜像创建一个容器
$ sudo docker run -d -P --name web -v /webapp training/webapp python app.py
-P是允许外部访问容器暴露的端口

用-v可以挂在本地已有的目录到容器里做数据卷, 这个是加载主机/src/webapp到容器的/opt/webapp目录
$ sudo docker run -d -P --name web -v /src/webapp:/opt/webapp training/webapp python app.py

目录不存在是docker会自动创建, 默认挂载权限是rw,可以变只读ro
$ sudo docker run -d -P --name web -v /src/webapp:/opt/webapp:ro training/webapp python app.py

-v也可以挂载单个文件做数据卷
$ sudo docker run --rm -it -v ~/.bash_history:/.bash_history ubuntu /bin/bash #这样就可以记录下容器的bash历史了


数据卷容器
用途是让容器之间共享一些持续更新的数据, 数据卷容器本质就是一个普通容器，专门用它提供数据卷供其他容器挂载使用

例: 创建一个数据卷容器dbdata并挂一个数据卷到/dbdata
$ sudo docker run -it -v /dbdata --name dbdata ubuntu
然后可以用--volumes-from挂载dbdata容器里面的数据卷
$ sudo docker run -it --volumes-from dbdata --name db1 ubuntu
$ sudo docker run -it --volumes-from dbdata --name db2 ubuntu
此时容器db1和db2都挂载同一个数据卷到/dbdata目录，三个容器任何一方在该目录写入，其他容器都可以看到
还可以从已经挂载过的容器创建新的容器，使用同一个数据卷容器
$ sudo docker run -d --name db3 --volumes-from db1 training/postgres

利用数据卷容器迁移数据
备份上面例子的dbdata
$ sudo docker run -volumes-from dbdata -v $(pwd):/backup --name worker ubuntu tar cvf /backup/backup.tar /dbdata
首先利用ubuntu镜像创建了一个容器worker。使用--volumes-from dbdata参数来让worker容器挂载dbdata容器的数据卷；使用-v $(pwd):/backup参数来挂载本地的当前目录到worker容器的/backup目录。worker容器启动后，使用了tar cvf/backup/backup.tar/dbdata命令来将/dbdata下内容备份为容器内的/backup/backup.tar，即宿主主机当前目录下的backup.tar。

恢复数据到一个容器
首先创建一个带有数据卷的容器dbdata2：
$ sudo docker run -v /dbdata --name dbdata2 ubuntu /bin/bash
然后创建另一个新的容器，挂载dbdata2的容器，并使用untar解压备份文件到所挂载的容器卷中即可：
$ sudo docker run --volumes-from dbdata2 -v $(pwd):/backup busybox tar xvf/backup/backup.tar

############### Emby ###############
sudo docker run -d \
    --volume /media/jojo/Media/config \
    --volume /media/jojo/Media/media/电影 \
    --volume /media/jojo/Media/media/动画 \
    --device /dev/dri/renderD128 \
    --publish 8096:8096 \
    --publish 8920:8920 \
    --env UID=1000 \
    --env GID=100 \
    --env GIDLIST=100 \
    emby/embyserver:latest
