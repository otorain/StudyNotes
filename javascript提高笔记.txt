::作用域
var scope = 'global';
var f = function() { console.log(scope); // 输出 undefined var scope = 'f';
};
f();
￼上面代码可能和你预想的不一样,没有输出 global,而是undefined,这是为什么呢? 这是 JavaScript 的一个特性,按照作用域搜索顺序,在 console.log 函数访问 scope 变 量时,JavaScript 会先搜索函数 f 的作用域,恰巧在 f 作用域里面搜索到 scope 变量, 所以上层作用域中定义的 scope 就被屏蔽了,但执行到 console.log 语句时,scope 还 没被定义,或者说初始化,所以得到的就是 undefined 值了。

var f = function() {
  var scope = 'f0'; 
  (function() {
    var scope = 'f1'; 
    (function() {
      console.log(scope); // 输出 f1 
    })();
  })();
};
f();
上面是一个函数作用域嵌套的例子,我们在最内层函数引用了 scope 变量,通过作用 域搜索,找到了其父作用域中定义的 scope 变量。
有一点需要注意:函数作用域的嵌套关系是定义时决定的,而不是调用时决定的,也就 是说,JavaScript 的作用域是静态作用域,又叫词法作用域,这是因为作用域的嵌套关系可 以在语法分析时确定,而不必等到运行时确定。

::call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。 
var first_object = { 
    num: 42 
}; 
var second_object = { 
    num: 24 
}; 
function multiply(mult) { 
    return this.num * mult; 
} 
multiply.call(first_object, 5); // returns 42 * 5 
multiply.call(second_object, 5); // returns 24 * 5 

::apply方法 apply方法的第一个参数也是要传入给当前对象的对象，即函数内部的this。后面的参数都是传递给当前对象的参数。 
对于apply和call两者在作用上是相同的，但两者在参数上有区别的。对于第一个参数意义都一样，但对第二个参数：apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始）。 
如 func.call(func1,var1,var2,var3)对应的apply写法为：func.apply(func1,[var1,var2,var3])同时使用apply的好处是可以直接将当前函数的arguments对象作为apply的第二个参数传入。 
-------------------------------------
arguments
arguments对象是函数里面的参数数组
arguments是不可变数组，不能在其中使用pop,shift那些数组方法,jquery的makeArray可以把她转成数组
var newArray = $.makeArray(arguments)

-------------------------------------
::caller 属性 
返回一个对函数的引用，即调用了当前函数的函数体。 
functionName.caller :functionName 对象是所执行函数的名称。 
说明: 对于函数来说，caller 属性只有在函数执行时才有定义。 如果函数是由 JScript 程序的顶层调用的，那么 caller 包含的就是 null 。如果在字符串上下文中使用 caller 属性，那么结果和 functionName.toString 一样，也就是说，显示的是函数的反编译文本。(可直接获取函数的string！！)

：：callee属性 
返回正被执行的 Function 对象，也就是所指定的 Function 对象的正文。 
[function.]arguments.callee:可选项 function 参数是当前正在执行的 Function 对象的名称。 
说明: 
callee 属性的初始值就是正被执行的 Function 对象。 
callee 属性是 arguments 对象的一个成员，它表示对函数对象本身的引用，这有利于匿 
函数的递归或者保证函数的封装性，例如下边示例的递归计算1到n的自然数之和。而该属性 
仅当相关函数正在执行时才可用。还有需要注意的是callee拥有length属性，这个属性有时 
用于验证还是比较好的。arguments.length是实参长度，arguments.callee.length是 
形参长度，由此可以判断调用时形参长度是否和实参长度一致。 

::bind 
var first_object = { 
    num: 42 
}; 
var second_object = { 
    num: 24 
}; 
function multiply(mult) { 
    return this.num * mult; 
} 
Function.prototype.bind = function(obj) { 
    var method = this, 
    temp = function() { 
	return method.apply(obj, arguments); 
    }; 
    return temp; 
} 
var first_multiply = multiply.bind(first_object); 
first_multiply(5); // returns 42 * 5 
var second_multiply = multiply.bind(second_object); 
second_multiply(5); // returns 24 * 5 

-------------------------------------------------
prototype
function独有的原型
1)prototype里面添加的方法应该要理解成是添加实例方法, 因为无论在哪里定义 类.prototype.fuck =function(){}; 然后这个类的所有实例都会有了这个fuck()方法，并且里面的this就是当前对象

2)prototype原型类似一个模板对象，他上面的属性被用来初始化一个新对象；任何一个对象都可以作为另外一个对象的原型对象，用以共享属性，这个多用于继承或者为实例添加方法；
    Animal.prototype = new OldAnimal();//这样所有的Animal就马上继承了OldAnimal的属性
    //有时每次要new OldAnimal会造成内存占用，可以使用一个空方法去做，因为需要的其实只是OldAnimal的属性
    var temp = function(){};
    temp.prototype = OldAnimal.prototype
    Animal.prototype = new temp();

------------------------------------------------
this 在函数调用位置里面的变化
有时要把对象的function传到一些其他的方法中调用，这是方法里面的this会容易发生变化，我们应该先用变量保存下来
var clicky = {
    wasClicked: function(){
	///
    },

    addListeners: function() {
	var self = this; //这里先保存一下this,那下面在其他上下文调用这个对象的时候就保证this不会变化
	$('#click').click(function(){
	    self.wasClicked();
	});
    }
}

//上面的例子可以通过apply写得更优雅，把回调包在另外一个匿名函数中，保持上下文
var proxy = fucntion(func, thisObject){
    return function(){
	return func.apply(thisObject,arguments);
    }
}
//上面的回调就可以写成
$("#click").click(proxy(this.wasClicked,this));

------------------------------------
javascript的私有属性
我们可以把私有属性都定义到一个匿名函数里面，让外部不能访问
var Person = fucntion(){};
(function(){
    var findById = function(){/*xxxx*/};
    Person.find = function(id) {
	return findById(id);
    }
})();
//这个例子findById这个属性是不能通过Person.findById访问的

------------------------------------
jquery的delegate 和 bind的对比
如果用bind或者直接绑定function到选择器，会每一个匹配元素都会绑定上事件处理函数，这样很浪费性能，delegate则只会委托一份
$("ul li").click(function(){})//dont do this!!!
$("ul").delegate("li", "click", [data], function(){}) //这样可以只绑定一个函数，性能更好，并且新加入的dom元素也会委托到,类似live
------------------------------------
jquery的trigger自定义事件
$(".class").bind('refresh.fuck', function(){})
$(".class").trigger('refresh.fuck')

-----------------------------------
修改浏览器后退行为的方法
利用window.location.hash
$("#jas").click(function(){
    window.location.hash = $(this).val();
}); //把东西保存到window.location.hash

$(window).bind('hashchange', function(){
    $('#jas').val  = window.location.hash
});//每次window退后就会把东西填回到div里面

-----------------------------------
文件的高级应用(某些基于html5接口)
1)访问文件信息
html5用File对象表示文件,有三个属性(name size type), FileList对象可以获取文件数组

2)验证文件（是否图片）
var input = $("input[type='file']");
input.change(function(){
    var files = this.files;
    for(var i=0; i<files.length; i++){
	assert(files[i].type.match(/images.*/));
    }
});

3)拖曳
事件有 dragstart, drag, dragover, dragenter, dragleave, drop, dropend
启用(设置draggable属性):
<div draggable="true" id="dragme">Drag me!</div> //我们可以调用dragstart事件,调用setData()函数
var element = $("#dragme")
element.bind("dragstart", function(event){
    event = event.originalEvent; //不用jquery的抽象对象,因为要用到dataTransfer里面的api
    
    event.dataTransfer.effectAllowed = "move";
    event.dataTransfer.setData("text/plain", $(this).text()); //这样这个div拖曳到那个地方就可以让他显示Dragme!
    event.dataTransfer.setData("text/html", $(this).html());
    event.dataTransfer.setDragImage("/images/drag.png", -10, -10); //拖曳的时候跟随鼠标的图像，坐标是相对鼠标的位置
});
除了"text/plain"之外还有"text/uri-list"用于拖曳连接
event.dataTransfer.setData("text/uri-list","http://www.gu-da.com")

4)释放拖曳
element.bind("dragenter", function(e){
    e.stopPropagation();
    e.preventDefault();
});


element.bind("dragover", function(e){
    e.originalEvent.dataTransfer.dropEffect = "copy"; //设置鼠标

    e.stopPropagation();
    e.preventDefault();
});

//只有释放了dragenter和dragover事件之后，我们才能监听drop事件,drop事件的dataTransfer有个files事件返回FileList,这个dataTransfer有types和getData属性
element.bind("drop", function(e){
    e = e.originalEvent;
    
    e.dataTransfer.types.match("File") //如果有文件会有Files字样
    e.dataTransfer.getData("Text")//如果不是文本文件会返回undefined

    files = e.dataTransfer.files
    files do name size type
});

5)撤销body原来的dragover事件
通常拉个文件到浏览器都会让浏览器重定向，要取消这事件
$('body').bind("dragover",function(e){
    e.stopPropagation();
    e.preventDefault();
    return false;
});

6)读文件!!
获取File引用之后可以实例一个FileReader对象，这对象有四种方法去读取文件
readAsBinaryString(Blob|File) //二进制字符串
readAsDataURL(Blob|File) //以url返回这文件，可以用做图像src属性!
readAsText(Blob|File, enccoding='UTF-8') 
readAsArrayBuffer()//很多浏览器未实现

FileReader还包括几个事件
onerror //发生错误时候调用
onprogress //数据读取的时候调用
onload //数据可用的时候调用

要使用FileReader,要生成实例，监听事件
reader = new FileReader();
reader.onload = function(e){
    var data = e.target.result; //onload有result属性
};
reader.readAsDataURL(file)

略缩图例子!! :
preview = $("img#preview")
//检查文件类型
//检查体积
if(file.type.match(/image.*/)) && file.size< 50000000 {
    var reader = new FileReader();
    reader.onload= function(e){
	var data = e.target.result;
	preview.attr("src",data);
    };
    reader.readAsDataURL(file);
}

7)hack掉原来上传文件丑陋的按钮！ //可暂不用
var input = $("attach").broseElement();
input.change(function(){
    var files = $(this).attr("files");
});

8)使用ajax上传文件!!
xhr2提供的借口可以另浏览器不跳转
FormData是一个非常方便的表单对象，提供很多简易借口,可以创建表单对象，也可以在init时候把已有对象抓进来
var formData = new FormData($("form")[0]) //创建新对象
formData.append("stringKey","StringData") //添加字符串
formData.append("fileKey",file) //添加文件对象

这是给formData增加参数，有时想简单从表单里面拿到所有数据，可以用jquery的serializeArray()或者serizlize(),前者是返回一个数组，每一个项是hash键值对，后者是get形式的参数

FormData准备好之后，就可以用ajax post到服务器了,要用jquery发ajax的话，要注意把processData设成false,这样jquery就不会对数据序列化,并且不需要设置Content-Type头
formdata:
$.ajax(
	{
	    data: formData, //这里其实也可以直接传File对象
	    processData: false,
	    url: "your url actio$an",
	    type: "POST",
	    success: function(){...};
	}
      )

xhr:
var req = new XMLHttpRequest();
req.open("POST","URL",true);
req.send(file)

上面两种上传方式只会传纯文件内容，没有文件头,会缺少文件名的信息,要的话可以这样传
$.ajax({
    url:"blah",
    type:"POST",
    success:function(){},
    processData:false,
    contentType:"multipart/form",
    beforeSend: function(xhr,settings){
	xhr.setRequestHeader("Cache-Control","no-cache")
	xhr.setRequestHeader("X-File-Name",file.fileName)
	xhr.setRequestHeader("X-File-Size",file.fileSize)
    },
    data: file //推荐用FormData对象，因为纯文件对象经常会有服务器方的问题
})

9)进度条
xhr2有progress事件，可以方便跟踪进度
下载的进度
req = new XMLHttpRequest();
req.addEventListener("progress", updateProgress, false);
req.addEventListener("load", transferComplete, false);
req.open();
上传的进度需要给upload添加监听
req = new XMLHttpRequest();
req.upload.addEventListener("progress", updateProgress, false);
req.upload.addEventListener("load", transferComplete, false);
req.open();

看jquery的例子,xhr对象都传给了beforeSend的回调
$.ajax({
    url:"blah",
    type:"POST",
    success:function(){},
    processData:false,
    dataType:"multipart/form",
    beforeSend: function(xhr,settings){
	var upload = xhr.upload;
	if(settings.progress){
	    upload.addEventListener("progress",settings.progress,false);
	}
	if(settings.load){
	    upload.addEventListener("load", settings.load, false);
	}
	var fd = new FormData;
	for(var key in settings.data) {
	    fd.append(key, settings.data[ke$ay]);
	}
	settings.data = fd;
    },
    data: file 
});

progress事件包含一个position(已上传)和total(总字节数)的属性,还有一个timeStamp（上传了的时间）
var progress = function(event){
    var percentage = Math.round((event.prosition/event.total) * 100);
    //设置进度条
}


--------------
jquery 获取img src origin width height的方法
原理， 复制走img，去掉height 和 width 属性， append 到其他地方拿到了原来的属性后，在 remove掉克隆
// Copy the image, and insert it in an offscreen DIV
// aimgcopy = $('#myimg').clone();
// $('#store').append(aimgcopy);
//
// // Remove the height and width attributes
// aimgcopy.removeAttr('height');
// aimgcopy.removeAttr('width');
//
// // Now the image copy has its "original" height and width
// alert('Height: '+aimgcopy.height()+' Width: '+aimgcopy.width());
//
jquery 获取元素绑定了什么events的方法
1.8之前 $(element).data("events")["click"] //data("events")可以遍历
1.8之后 $._data("events")["click"] //_data("events")可以遍历, 这样是为了预防方法重名

---------------
jquery deferred!!!
延迟对象执行，解决各种同步异步的问题,方便了排列各种回调的顺序, 还有把回调的设定延迟到各种地方 
像过去使用 $.ajax({
  url:"xxx.html",
  method:"post",
  data:"{xxx:xxx}",
  success:function(data){dosomething},
  error:function(data){dosomething},
})
这样做虽然可以指定success和error，但是我们没有办法在外面控制$.ajax,因为$.ajax()的方法返回是xhr对象，我们不能在外面拿到callback的时机,

1)现在1.5后开始$.ajax返回一个deferred对象，这个就是jquery用来控制延迟执行方法的对象,新写法
$.ajax("xxx.html").done(function(){alert("ok")}).fail(function(){alert("fail")});

2)可以指定多个同样的回调函数
$.ajax("xxx.html").done().fail().done().fail();

3)新方法$.when()，让你为多个事件指定同一个延迟执行函数
$.when($.ajax("link1.html"), $.ajax("link2.html"))
  .done()
  .fail()
意思是同时执行link1 和 link2的ajax请求，两个都成功的时候执行done, 有一个失败了就执行fail(), 类似 &&

4)普通方法延迟使用done fail!!!!
var wait = function(){
  var tasks = function(){
    alert("执行完毕！");
  };
 setTimeout(tasks,5000);
};
如果想为他指定回调函数
$.when(wait()).done().fail()
这样做会失败！因为$.when()只会返回deferred对象，没有做什么时候done,什么时候fail标记，我们要对函数改写:
var dtd = $.Deferred(); // 新建一个deferred对象
var wait = function(dtd){
  tasks = function(){
    alert("执行完毕！");
    dtd.resolve(); // 改变deferred对象的执行状态
  };
  setTimeout(tasks,5000);
  return dtd;
};
$.when(wait()).done().fail()现在就可以成功了

5)
dtd.resolve()的作用是什么？
要说清楚这个问题，就要引入一个新概念"执行状态"。jQuery规定，deferred对象有三种执行状态----未完成，已完成和已失败。如果执行状态是"已完成"（resolved）,deferred对象立刻调用done()方法指定的回调函数；如果执行状态是"已失败"，调用fail()方法指定的回调函数；如果执行状态是"未完成"，则继续等待，或者调用progress()方法指定的回调函数（jQuery1.7版本添加）。
前面部分的ajax操作时，deferred对象会根据返回结果，自动改变自身的执行状态；但是，在wait()函数中，这个执行状态必须由程序员手动指定。dtd.resolve()的意思是，将dtd对象的执行状态从"未完成"改为"已完成"，从而触发done()方法。

dtd.resolve() 完成
dtd.reject() 失败

6)如果在函数直接返回 deferred对象，那么在外部就可以随意让dtd.resolve()导致done方法马上执行了，所以jquery搞了个deferred.promise()方法，令返回的对象不可随意更改状态, 还有derferred对象的创建最好也写在wait的内部 

7)也可以用全局函数
$.Deferred(wait).done().fail() //注意传的是函数名
这样做的话可以在wait里面使用一个deferred的变量对象

8)还可以用这种方式去定义，不过用起上来比较怪
var dtd = $.Deferred(); // 生成Deferred对象
var wait = function(dtd){
  var tasks = function(){
    alert("执行完毕！");
    dtd.resolve(); // 改变Deferred对象的执行状态
  };
  setTimeout(tasks,5000);
};
dtd.promise(wait);
wait.done(function(){ alert("哈哈，成功了！");})
.fail(function(){ alert("出错啦！");});
wait(dtd);

9)为了省事，你可以把done()和fail()写在一起,then()
deferred().then(doneFunc, failFunc)

10)always()
这东西是，不管resolve() or reject()，这回调都会执行
自己的更新
11）resolve(value), reject(value)
方法里面的参数可以传出给 done(value), fail(value)

11)deferred.pipe( [doneFilter] [, failFilter] [, progressFilter]  ), 可以把本来已返回deferred继续切割成几种状态，然后在外面指定回调
var request = $.ajax( url, { dataType: "json"  }  ),
    chained = request.pipe(function( data  ) {
      return $.ajax( url2, { data: { user: data.userId  }  }  );

    });

chained.done(function( data  ) {
  // data retrieved from url2 as provided by the first request
  //
});

12)defered.state()返回当前deferred对象的状态 
"pending": 未完成
"resolved": 原函数已完成，并且done函数已被call打后
"rejected": 原函数已失败，并且fail函数已被call打后

13)defered.notify(args) 所有done() fail() then()里面的函数都会执行

14)rejectWith() resolveWith(), 这东西可以指定done和fail的上下文

!!!deferred技巧，当有一个deferreds array的时候，怎样才能传入$.when呢? 可以利用apply
$.when.apply($, my_array)

#闭包笔记补充
下面例子是，如果程序不加var，就会一层层向上找变量的引用，如果找不到就会创建一个全局的变量
// These are both globals
var foo = 1;
bar = 2;
function test()
{
    var foo = 1; // Local
    bar = 2;     // Global
 
    // Execute an anonymous function
    (function()
    {
        var wibble = 1; // Local
        foo = 2; // Inherits from scope above (creating a closure)
        moo = 3; // Global
    }())
}

闭包
闭包就是函数的局部变量集合，只是这些局部变量在函数返回后会继续存在。
闭包就是就是函数的“堆栈”在函数返回后并不释放，我们也可以理解为这些函数堆栈并不在栈上分配而是在堆上分配
当在一个函数内定义另外一个函数就会产生闭包

闭包简单例子
function greeting(name) {
    var text = 'Hello ' + name; // local variable
    // 每次调用时，产生闭包，并返回内部函数对象给调用者
    return function() { alert(text); }
}
var sayHello=greeting("Closure");
sayHello()  // 通过闭包访问到了局部变量text

5个例子说明闭包的特性
例子1:闭包中局部变量是引用而非拷贝
function say667() {
    // Local variable that ends up within closure
    var num = 666;
    var sayAlert = function() { alert(num); }
    num++;
    return sayAlert;
}
 
var sayAlert = say667();
sayAlert()// 因此执行结果应该弹出的667而非666。

例子2：多个函数绑定同一个闭包，因为他们定义在同一个函数内。
function setupSomeGlobals() {
    // Local variable that ends up within closure
    var num = 666;
    // Store some references to functions as global variables
    gAlertNumber = function() { alert(num); }
    gIncreaseNumber = function() { num++; }
    gSetNumber = function(x) { num = x; }
}
setupSomeGlobals(); // 为三个全局变量赋值
gAlertNumber(); //666
gIncreaseNumber();
gAlertNumber(); // 667
gSetNumber(12);//
gAlertNumber();//12

例子3：当在一个循环中赋值函数时，这些函数将绑定同样的闭包
function buildList(list) {
    var result = [];
    for (var i = 0; i < list.length; i++) {
        var item = 'item' + list[i];
        result.push( function() {alert(item + ' ' + list[i])} );
    }
    return result;
}
 
function testList() {
    var fnlist = buildList([1,2,3]);
    // using j only to help prevent confusion - could use i
    for (var j = 0; j < fnlist.length; j++) {
        fnlist[j]();
    }
}
//testList的执行结果是弹出item3 undefined窗口三次，因为这三个函数绑定了同一个闭包，而且item的值为最后计算的结果，但是当i跳出循环时i值为4，所以list[4]的结果为undefined.

例子4：外部函数所有局部变量都在闭包内，即使这个变量声明在内部函数定义之后。
function sayAlice() {
    var sayAlert = function() { alert(alice); }
    // Local variable that ends up within closure
    var alice = 'Hello Alice';
    return sayAlert;
}
var helloAlice=sayAlice();
helloAlice(); //执行结果是弹出”Hello Alice”的窗口。即使局部变量声明在函数sayAlert之后，局部变量仍然可以被访问到。

例子5：每次函数调用的时候创建一个新的闭包
function newClosure(someNum, someRef) {
    // Local variables that end up within closure
    var num = someNum;
    var anArray = [1,2,3];
    var ref = someRef;
    return function(x) {
        num += x;
        anArray.push(num);
        alert('num: ' + num +
        '\nanArray ' + anArray.toString() +
        '\nref.someVar ' + ref.someVar);
    }
}
closure1=newClosure(40,{someVar:'closure 1'});
closure2=newClosure(1000,{someVar:'closure 2'});
 
closure1(5); // num:45 anArray[1,2,3,45] ref:'someVar closure1'
closure2(-10);// num:990 anArray[1,2,3,990] ref:'someVar closure2'

Singleton 
var singleton = function () {
    var privateVariable;
    function privateFunction(x) {
        ...privateVariable...
    }
 
    return { //这里返回的对象永远访问到的都是上面同一个引用
        firstMethod: function (a, b) {
            ...privateVariable...
        },
        secondMethod: function (c) {
            ...privateFunction()...
        }
    };
}();


!!!javascript事件处理器在线程空闲之前不会执行
for(var i=1; i<=3; i++){
  setTimeout(function(){alert(i)}, 0)
}
结果 4, 4, 4
这个特性非常重要，像setTimeout这种函数，他会直接排进一个队列，在他后面的代码都执行完之后，js虚拟机才会到队列问，有东西要运行吗？然后排个后面的毫秒数后再运行

利用这个特性，我们可以规范一下，“当一个函数有返回值，代码里又会产生异步的时候，最好保证异步的执行时间在函数返回值之后”, 要做这个，就要用上面这个特性了
function(callback){
  var socket = new WebSocket();
  //_.compose(callback, socket.open); //异步调用
  //最后把上面一句改成
  setTimeout(function(){_.compose(callback,socket.open)}, 0);// 这样这句会在下面的socket返回之后再执行，这样我们就可以控制到程序的顺序
  return socket; //函数会有返回
}

-------------
用history.length 判断浏览器有无向后的的历史

------------
javascript 遇到 readAsText编码问题解决方法 document.defaultChartset file_reader.readAsText(file, document.defaultCharset), 分割换行符windows支持问题, xxx.split(/\r?\n/)


============
Canvas !!
创建 canvas 的方法很简单，只需要在 HTML 页面中添加 <canvas> 元素：

<canvas id="myCanvas" width="300" height="150">
</canvas>
为了能在 JavaScript 中引用元素，最好给元素设置 ID ；也需要给 canvas 设定高度和宽度。


画个矩形
var elem = document.getElementById('myCanvas');
var context = elem.getContext('2d');
context.fillRect(0, 0, 150, 100);

裁剪图像
context.drawImage(img_elem, dx, dy);

context.drawImage(img_elem, dx, dy, dw, dh);

context.drawImage(img_elem, sx, sy, sw, sh, dx, dy, dw, dh);

3个参数：最基本的 drawImage 使用方法。一个参数指定图像位置，另两个参数设置图像在 canvas中的位置。
5个参数：中级的 drawImage 使用方法，包括上面所述3个参数，加两个参数指明插入图像宽度和高度 (如果你想改变图像大小)。
9个参数：最复杂drawImage 杂使用方法，包含上述5个参数外，另外4个参数设置源图像中的位置和高度宽度。这些参数允许你在显示图像前动态裁剪源图像。

-----------------
父元素滚动到子元素
首先父元素要设置position: relative
$(parent).scrollTop($(child).position().top)

---------------
数组.splice(index, 个数，[是否需要替代的元素])
splice(2,2) 从2的位置删除两个
splice(2,2, 1, 1) 从2的位置替换两个为1
